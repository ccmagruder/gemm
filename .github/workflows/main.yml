name: CI

on:
  push:
    branches:
      - main
  pull_request:
    types:
      - opened
      - synchronize

jobs:
  devcontainer:
    runs-on: self-hosted
    steps:
      - name: cleanup build folder
        run: |
          ls -la ./
          rm -rf ./* || true
          rm -rf ./.??* || true
          ls -la ./

      - name: checkout repo
        uses: actions/checkout@v4

      - name: docker build
        run: docker compose build devcontainer

      - name: nvidia-smi
        run: docker compose run --rm devcontainer nvidia-smi

  jupyter:
    runs-on: self-hosted
    steps:
      - name: cleanup build folder
        run: |
          ls -la ./
          rm -rf ./* || true
          rm -rf ./.??* || true
          ls -la ./

      - name: checkout repo
        uses: actions/checkout@v4

      - name: docker build jupyter
        run: docker compose build jupyter

  build:
    needs: devcontainer
    runs-on: self-hosted
    steps:
      - name: cleanup build folder
        run: |
          ls -la ./
          rm -rf ./* || true
          rm -rf ./.??* || true
          ls -la ./

      - name: checkout repo
        uses: actions/checkout@v4

      - name: clang-format
        run: |
          docker run --rm -v .:/root ccmagruder/devcontainer-gemm:latest ls /root
          docker run --rm -v .:/root ccmagruder/devcontainer-gemm:latest bash -c "cd /root && clang-format --dry-run --Werror gemm/**/*.h gemm/**/*.cpp gemm/**/*.cuh gemm/**/*.cu"

      - name: cmake configure
        run: docker run --rm --gpus all -v .:/root ccmagruder/devcontainer-gemm:latest cmake -DCMAKE_BUILD_TYPE=Release -S /root/gemm -B /root/build

      - name: cmake build
        run: docker run --rm --gpus all -v .:/root ccmagruder/devcontainer-gemm:latest cmake --build /root/build

      - name: google test
        run: docker run --rm --gpus all -v .:/root ccmagruder/devcontainer-gemm:latest ctest --test-dir /root/build --output-on-failure

      - name: upload benchmark binaries
        uses: actions/upload-artifact@v4
        with:
          name: bGemm
          path: build/tests/bGemm


  benchmark:
    needs: build
    runs-on: self-hosted
    steps:
      - name: cleanup build folder
        run: |
          ls -la ./
          rm -rf ./* || true
          rm -rf ./.??* || true
          ls -la ./

      - name: download benchmark binaries
        uses: actions/download-artifact@v4
        with:
          name: bGemm

      - name: google benchmark
        run: |
          chmod +x bGemm
          docker run --rm --gpus all -v .:/root ccmagruder/devcontainer-gemm:latest /root/bGemm --benchmark_out=/root/bGemm.json --benchmark_out_format=json --benchmark_time_unit=s

      - name: upload benchmark json results
        uses: actions/upload-artifact@v4
        with:
          name: bGemm.json
          path: bGemm.json

  plots:
    needs: [benchmark, jupyter]
    runs-on: self-hosted
    steps:
      - name: cleanup build folder
        run: |
          ls -la ./
          rm -rf ./* || true
          rm -rf ./.??* || true
          ls -la ./

      - name: checkout repo
        uses: actions/checkout@v4

      - name: download benchmark results
        uses: actions/download-artifact@v4
        with:
          name: bGemm.json

      - name: generate jupyter plots
        run: docker run --rm -v .:/root ccmagruder/jupyter-gemm:latest bash -c "cd /root && papermill plots.ipynb plots.ipynb"

      - name: export notebook to html
        run: docker run --rm -v .:/root ccmagruder/jupyter-gemm:latest bash -c "cd /root && jupyter nbconvert --to html plots.ipynb"

      - name: upload jupyter notebook
        uses: actions/upload-artifact@v4
        with:
          name: plots.html
          path: plots.html
